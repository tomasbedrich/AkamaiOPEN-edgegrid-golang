package storage

import (
	"context"
	"fmt"
	"net/http"
	"strconv"
)

// StorageGroups contains operations available on a StorageGroup resource
// See: https://developer.akamai.com/api/media_delivery/netstorage_configuration/v1.html
type StorageGroups interface {
	// NewStorageGroupResponse instantiates a new StorageGroupResponse structure
	NewStorageGroupResponse(context.Context) *StorageGroupResponse

	// NewStorageGroup creates a new StorageGroup object.
	//NewStorageGroup(context.Context) *StorageGroup  // TODO implement

	// ListStorageGroups retrieves all StorageGroups
	// See: https://developer.akamai.com/api/media_delivery/netstorage_configuration/v1.html#getstoragegroups
	//ListStorageGroups(context.Context, string) ([]*StorageGroup, error)  // TODO implement

	// GetStorageGroup retrieves a StorageGroup with the given ID.
	// See: https://developer.akamai.com/api/media_delivery/netstorage_configuration/v1.html#getaspecificstoragegroup
	GetStorageGroup(context.Context, int) (*StorageGroup, error)

	// Create the StorageGroup identified by the receiver argument in the specified domain.
	// See: https://developer.akamai.com/api/media_delivery/netstorage_configuration/v1.html#poststoragegroups
	//CreateStorageGroup(context.Context, *StorageGroup, string) (*StorageGroupResponse, error)  // TODO implement

	// Delete the StorageGroup identified by the receiver argument from the domain specified.
	// TODO not supported via API?
	//DeleteStorageGroup(context.Context, *StorageGroup, string) (*ResponseStatus, error)  // TODO implement

	// Update the StorageGroup identified in the receiver argument in the provided domain.
	// See: https://developer.akamai.com/api/media_delivery/netstorage_configuration/v1.html#putaspecificstoragegroup
	//UpdateStorageGroup(context.Context, *StorageGroup, string) (*ResponseStatus, error)  // TODO implement

}

func (p *storage) GetStorageGroup(ctx context.Context, id int) (*StorageGroup, error) {

	logger := p.Log(ctx)
	logger.Debug("GetStorageGroup")

	var res StorageGroup
	getURL := fmt.Sprintf("/storage/v1/storage-groups/%s", strconv.Itoa(id))
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, getURL, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create GetStorageGroup request: %w", err)
	}
	resp, err := p.Exec(req, &res)
	if err != nil {
		return nil, fmt.Errorf("GetStorageGroup request failed: %w", err)
	}

	if resp.StatusCode != http.StatusOK {
		return nil, p.Error(resp)
	}

	return &res, nil
}

// ------------------------------------------------------------------------------------------------------------------
// Code generated by `schema-generate GetStorageGroup.json`. DO NOT EDIT.

// AgeDeletionsItems Automatic Purge Routines that have been set up for the group.
type AgeDeletionsItems struct {

	// When the `ageDeletionSizeBytes` value is reached for the target directory, this number is subtracted from the current date to determine a timestamp. Files older than this timestamp are purged.
	AgeDeletionDays float64 `json:"ageDeletionDays,omitempty"`

	// The target directory for an Automatic Purge Routine.
	AgeDeletionDirectory string `json:"ageDeletionDirectory,omitempty"`

	// POSIX regular expression pattern matching the filenames to exclude from the purge.
	AgeDeletionExclusionRegex string `json:"ageDeletionExclusionRegex,omitempty"`

	// POSIX regular expression pattern matching the filenames to include in the purge.
	AgeDeletionInclusionRegex string `json:"ageDeletionInclusionRegex,omitempty"`

	// Whether subdirectories within the target directory are also included in the purge. If `false`, only files within the target directory are purged.
	AgeDeletionRecursivePurge bool   `json:"ageDeletionRecursivePurge,omitempty"`
	AgeDeletionSelectionRegex string `json:"ageDeletionSelectionRegex,omitempty"`

	// Automatic purge occurs when the target directory reaches this size, in bytes.
	AgeDeletionSizeBytes float64 `json:"ageDeletionSizeBytes,omitempty"`
}

// StorageGroupCpcodesItems Encapsulates CP codes assigned to a group.
type StorageGroupCpcodesItems struct {
	AgeDeletions []*AgeDeletionsItems `json:"ageDeletions,omitempty"`

	// A CP code assigned to the group, and used to identify requests to a specific upload directory. The CP code serves as the root for upload directory. This is also referred to as the CP code root.
	CpcodeId int `json:"cpcodeId,omitempty"`

	// Specifies the file to serve if a request doesn't end in a specific filename and extension.
	DirListing *DirListing `json:"dirListing,omitempty"`

	// The level of security to obtain download access to the group. `ALL_EDGE_SERVERS` allows requests from all edge servers. `STREAMING_SERVERS_ONLY` only allows requests from edge servers dedicated to streaming media. `G_2_O_AND_ALL_EDGE_SERVERS` allows requests from all edge servers, but a warning is issued; it also allows all requests that include a valid G2O token, `G_2_O_ONLY` requires inclusion of a valid G2O token.
	DownloadSecurity string `json:"downloadSecurity,omitempty"`

	// The type of encoding to use when displaying paths in XML-aware contexts.
	EncodingConfig *EncodingConfig `json:"encodingConfig,omitempty"`

	// FTP to HTTP (F2H) conversion for FTP download efficiency.
	F2hConfig *F2hConfig `json:"f2hConfig,omitempty"`

	// Keys you can use to access the group with the NetStorage Usage API.
	G2o *G2o `json:"g2o,omitempty"`

	// When you create or modify an upload directory and changes are propagated to the NetStorage network, `true` indicates propagation is complete.
	LastChangesPropagated bool `json:"lastChangesPropagated,omitempty"`

	// The user who last modified the upload directory.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The date the upload directory was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// The total number of bytes used by the upload directory.
	NumberOfBytes int `json:"numberOfBytes,omitempty"`

	// The total number of files contained in the upload directory.
	NumberOfFiles int `json:"numberOfFiles,omitempty"`

	// Specifies the action taken when analyzing the request path.  See the set of [available values](#pathcheckandconversionvalues).
	PathCheckAndConversion string `json:"pathCheckAndConversion,omitempty"`

	// Specifies how query strings appended to request paths to this group are handled.
	QueryStringConversion *QueryStringConversion `json:"queryStringConversion,omitempty"`

	// Whether the `quick-delete` operation is available in the NetStorage Usage API and the CMShell.  Targets a specific directory in this group and recursively deletes all of its contents.
	QuickDelete bool `json:"quickDelete,omitempty"`

	// Standardizes case usage for filenames uploaded to your selected upload directory. `NO_CONVERSION`, `CONVERT_TO_UPPER` and `CONVERT_TO_LOWER` are self-explanatory. `STREAM_OS` indicates case requirements are applied to support the Stream OS product. This is only seen in a very limited number of legacy groups.
	RequestUriCaseConversion string `json:"requestUriCaseConversion,omitempty"`

	// The CP code root for the upload directory.
	RootDirectory string `json:"rootDirectory,omitempty"`

	// Whether a content item's MD5 digest values is sent in the HTTP `Content-MD5` response header.
	SendHash bool `json:"sendHash,omitempty"`

	// Whether NetStorage dynamically examines archived files to directly serve individual files from within the archive.
	ServeFromZip bool `json:"serveFromZip,omitempty"`

	// Whether the contents within the upload directory are replicated securely via Secure Sockets Layer (SSL).
	UseSsl bool `json:"useSsl,omitempty"`
}

// DirListing Specifies the file to serve if a request doesn't end in a specific filename and extension.
type DirListing struct {

	// If a request doesn't specifically end in a filename and extension, this specifies the default file that's served.
	IndexFileName string `json:"indexFileName,omitempty"`

	// Whether the file path is truncated or hidden in the file path displayed in the HTML directory listing for the index name file. `-1` indicates the full path is displayed, `0` indicates directory listings aren't served, but the search for the requested index name file continues, and an integer greater than zero indicates directory listings in the path are limited to this number.
	MaxListSize int `json:"maxListSize,omitempty"`

	// The action taken in the event of a 404 error, where the client was able to access NetStorage, but not the requested content or directory. `DO_NOT_SEARCH` stops additional searches, and returns a 404 error, `LOOK_FOR_EXPLICIT_DIR_ONLY` looks for an explicit directory matching the path specified in the request, and `LOOK_FOR_IMPLICIT_AND_EXPLICIT_DIR` looks for both an explicit and implicit directory that may match a path defined in the request.
	SearchOn404 string `json:"searchOn404,omitempty"`
}

// EncodingConfig The type of encoding to use when displaying paths in XML-aware contexts.
type EncodingConfig struct {

	// The selected encoding format, either `ISO_8859_1` which are 8-bit, single-byte coded graphic character sets, or `UTF_8` which are variable length, 8-bit code units via UTF-8 character encoding.
	Encoding string `json:"encoding,omitempty"`

	// Whether upload operations verify that all path values defined within the URL for target content are properly formatted using the selected encoding method.
	EnforceEncoding bool `json:"enforceEncoding,omitempty"`
}

// F2hConfig FTP to HTTP (F2H) conversion for FTP download efficiency.
type F2hConfig struct {
	F2hCookies     []string `json:"f2hCookies,omitempty"`
	F2hDirectories []string `json:"f2hDirectories,omitempty"`
}

// G2o Keys you can use to access the group with the NetStorage Usage API.
type G2o struct {

	// The G2O key. This is the `key` set in the upload account named as the `user`. It's used with the [NetStorage Usage API](https://learn.akamai.com/en-us/webhelp/netstorage/netstorage-http-api-developer-guide/) to access this group.
	Key string `json:"key,omitempty"`

	// The user who added or last modified the key.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp that represents when the G2O key was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// The G2O user upload account.  This is the name of an upload account for this group that enables access to the NetStorage Usage API.
	User string `json:"user,omitempty"`
}

// LinksItems [Hypermedia](#hypermedia) links to the specific group, as well as any upload accounts or geographic replication zones assigned to it.
type LinksItems struct {

	// A navigable path to the specific `rel` resource, once you prefix it with your hostname token.
	Href string `json:"href,omitempty"`

	// This represents the link relation to the storage group resource.  This can be either `self` for a link referring to the storage group itself, `uploadAccounts` for a link to an associated upload account, or `zones` for a geographic replication zone that can be used with the group.
	Rel string `json:"rel,omitempty"`
}

// PropagationStatus The current propagation status of the group.
type PropagationStatus struct {

	// Propagation statuses can be `PENDING`  which indicates the item is in queue or `ACTIVE` which indicates the group is propagated.
	Status string `json:"status,omitempty"`
}

// QueryStringConversion Specifies how query strings appended to request paths to this group are handled.
type QueryStringConversion struct {

	// A list of query string values that have been explicitly set to be excluded from conversion. Only applicable if `APPLY_ACS_QUERY_CONVERSION` is set as the `queryStringConversionMode`.
	QueryStringConversionExclude string `json:"queryStringConversionExclude,omitempty"`

	// If `APPLY_ACS_QUERY_CONVERSION` is set as the `queryStringConversionMode`, this specifies a list of query string values that should be included for ACS Query String Conversion, in the specific order they should be interpreted.
	QueryStringConversionKeyOrder string `json:"queryStringConversionKeyOrder,omitempty"`

	// Specifies how upload and download request query strings should be transformed before processing the request. With `STRIP_ALL_INCOMING_QUERY`, all query strings are stripped and ignored.  With `APPLY_ACS_QUERY_CONVERSION`, the key is reviewed and stripped down using settings defined for `queryStringConversionKeyOrder` and `queryStringConversionExclude`; a hash of the string is also applied and used for matching at request time. With `LEAVE_INCOMING_QUERY_AS_IS`, the string is left as is.
	QueryStringConversionMode string `json:"queryStringConversionMode,omitempty"`

	// The version in use for `queryStringConversion` with this group.
	QueryStringConversionVersion string `json:"queryStringConversionVersion,omitempty"`
}

// StorageGroup The basic unit within a NetStorage instance is referred to as a "storage group." A storage group is where you house your content for distribution. You can list and get details of a group.
type StorageGroup struct {

	// Whether this group is enabled for editing.
	AllowEdit bool `json:"allowEdit,omitempty"`

	// Whether Aspera Upload Acceleration has been enabled in an upload account that has access to this group.
	AsperaEnabled bool     `json:"asperaEnabled,omitempty"`
	Comments      []string `json:"comments,omitempty"`

	// The unique identifier set for the contract that contains your instance of NetStorage and this group.
	ContractId string                      `json:"contractId,omitempty"`
	Cpcodes    []*StorageGroupCpcodesItems `json:"cpcodes,omitempty"`

	// Your unique domain prefix (subdomain) value that the NetStorage system applies to the Domain Names used to access the group.
	DomainPrefix string `json:"domainPrefix,omitempty"`

	// The current volume of the group, in gigabytes.
	EstimatedUsageGB float64 `json:"estimatedUsageGB,omitempty"`

	// The user who last modified the group.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The date the group was last modified.
	LastModifiedDate string        `json:"lastModifiedDate,omitempty"`
	Links            []*LinksItems `json:"links,omitempty"`

	// The current migration status from FileStore format to ObjectStore format, if migration has been initiated.
	MigrationStatus string `json:"migrationStatus,omitempty"`

	// Whether Payment Card Industry (PCI) Data Security Standard support has been enabled for the storage group. These standards are designed to ensure that all companies that accept, process, store or transmit credit card information maintain a secure environment.
	PciEnabled bool `json:"pciEnabled,omitempty"`

	// The postfile domain, `{domain prefix}.postfile.akamai.com` configured for use with this group. The `{domain prefix}` variable is set up by you during the creation of the group.
	PostFileDomainEnabled bool `json:"postFileDomainEnabled,omitempty"`

	// The current propagation status of the group.
	PropagationStatus *PropagationStatus `json:"propagationStatus,omitempty"`

	// The current provisioning status of the group. `PROVISIONED` indicates the group is ready for use. `MARKED_FOR_DEPROVISIONING` indicates deprovisioning has been requested, but the group is still accessible. `DEPROVISIONED`  indicates deprovisioning has completed, and the group is no longer available. `NOT_PROVISIONED` indicates the group hasn't been requested for provisioning.
	ProvisionStatus string `json:"provisionStatus,omitempty"`

	// The unique identifier that's automatically set for the group.
	StorageGroupId int `json:"storageGroupId,omitempty"`

	// The name you've set for the group.
	StorageGroupName string `json:"storageGroupName,omitempty"`

	// The specific purpose defined for the storage group. See the set of [available values](#storagegrouppurposevalues).
	StorageGroupPurpose string `json:"storageGroupPurpose,omitempty"`

	// The Upload Domain Name for this group. It's used to access the group to upload content. This is automatically constructed using the domain prefix that you define when creating the group.
	UploadDomain string        `json:"uploadDomain,omitempty"`
	Zones        []*ZonesItems `json:"zones,omitempty"`
}

// ZonesItems The geographic replication zones configured for use with this group.  These are also referred to as replicas.
type ZonesItems struct {

	// How this zone has been configured to support direct downloads (rather than just for replication use). `YES` download from the zone is supported, `NO` not supported, and `FAILOVER` if other zones aren't available.
	AllowDownload string `json:"allowDownload,omitempty"`

	// How this zone has been configured to support direct uploads (rather than just for replication use). `YES` indicates uploads are supported. `NO` indicates uploads aren't supported. `FAILOVER` indicates uploads are supported to this zone only if no other zones are available.
	AllowUpload string `json:"allowUpload,omitempty"`

	// The user who last modified zone settings for this group.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The date these zone settings were last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// The action taken if the zone has no capacity for additional upload content. `SPILL_OUTSIDE` indicates content is temporarily uploaded outside the zone, to another zone configured for the group. `DENY_UPLOADS` indicates the zone doesn't support uploads for a `noCapacityAction`.
	NoCapacityAction string `json:"noCapacityAction,omitempty"`

	// The reason that a zone should be overridden for another zone.
	OverrideReason string `json:"overrideReason,omitempty"`

	// The zone that's used for override to accommodate the `noCapacityAction` operation, if applicable.
	OverrideZoneName string `json:"overrideZoneName,omitempty"`

	// The name of the geographic replication zone.
	ZoneName string `json:"zoneName,omitempty"`
}
