package storage

// ------------------------------------------------------------------------------------------------------------------
// Code generated by `schema-generate GetUploadAccount.json`. DO NOT EDIT.

// AccessConfig Specifies the settings for the upload directory that has been selected for this account.
type AccessConfig struct {

	// The directory set up to serve as the Directory Limit, if applicable. This is a directory other than the storage group's actual CP code root, that has been set up as the root for the account. Access for the account is limited to this directory and any existing subdirectories.
	ChrootDirectory string                       `json:"chrootDirectory,omitempty"`
	Cpcodes         []*UploadAccountCpcodesItems `json:"cpcodes,omitempty"`

	// Whether a Directory Limit has been established for the account.
	HasDirectoryLimit bool `json:"hasDirectoryLimit,omitempty"`

	// The Read-Write vs. Read-only setting for the account. A value of `true` indicates the account can only view content in its associated storage group.
	HasReadOnlyAccess bool `json:"hasReadOnlyAccess,omitempty"`

	// Specifies the default directory for the account, if configured. The directory named here is the default point of access when connecting to the storage group. If not configured, `loginDirectory` is blank.
	LoginDirectory string `json:"loginDirectory,omitempty"`
}

// AsperaItems Settings pertaining to Aspera Upload Acceleration.
type AsperaItems struct {

	// Any optional notes made for the SSH key.
	Comments string `json:"comments,omitempty"`

	// A unique identifier for Aspera Upload Acceleration.
	Id string `json:"id,omitempty"`

	// Whether Aspera Upload Acceleration has been enabled for this account.
	IsActive bool `json:"isActive,omitempty"`

	// The SSH key applied to the account that has been assigned to Aspera.  SSH-2 RSA and SSH-2 DSA formats are supported.
	Key string `json:"key,omitempty"`

	// The user who last modified the SSH key.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the SSH key was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`
}

// BruteForceAttackConfig Configures how to prevent brute force attacks over FTP. This protects the target storage group from excessive incorrect FTP login attempts.
type BruteForceAttackConfig struct {

	// The number of failed login attempts to trigger the lockdown for an offending client IP address.
	FailedLoginThreshold float64 `json:"failedLoginThreshold,omitempty"`

	// The number of seconds an offending IP address is blocked from FTP access once the `failedLoginThreshold` total is reached.
	LockDownDurationSeconds float64 `json:"lockDownDurationSeconds,omitempty"`
}

// ChangeHistoryItems Lists each change made to the account.
type ChangeHistoryItems struct {

	// The action performed with the change. `ADDED` indicates the account was actually added. `DELETED` indicates the account was deleted. `ENABLED` or `DISABLED` indicates the change was made to affect the availability of the account. `ROTATED` indicates a password or key assigned to an access method was rotated to a new instance. `UPDATED` indicates an option or setting was changed in the account.
	Action string `json:"action,omitempty"`

	// The option or functionality that was modified. `CPCODE` indicates the change applied to the application of a CP code for use in an upload directory. `FTP` indicates the change applied to FTP authentication access. `SSH_KEY` indicates the change applied to SSH authentication access. `RSYNC` indicates the change applied to Rsync (password) authentication. `ASPERA` indicates the change applied to Aspera Upload Accelerations settings. `SUBDIR_RESTRICTION` indicates the change applied to a Subdirectory Restriction. `CHROOT` indicates the change applied to a Directory Limit. `LOGINDIR` indicates the change applied to a Default Directory. `CMS` indicates the change applied to settings for the Content Management (CM) Shell. `FM` indicates the change applied to FileManager access. `HTTP_UPLOAD_OPTIONS` indicates the change applied to HTTP Upload Service. `FTP_DOWNLOAD_OPTIONS` indicates the change applied to FTP Download Services. `UPLOAD_ACCOUNT` indicates the change applied to general account settings. `ACCESS` indicates the change applied to some form of access for the account. `G2O` indicates the change applied to the G2O Key used for access to the NetStorage Usage API. `RULESET` indicates the change applied to and Access Control Group (ACL) Rule Set. `BFA` indicates the change applied to BFA. `IP` indicates the change applied to IP. `SERVICE_VARIABLE` indicates the change applied to a service variable. `MFA_CONFIG` indicates the change applied to the actual configuration settings Two-factor authentication. `MFA_SECRET` indicates the change applied to the `ftpSecrets` assigned to Two-factor authentication for the account.
	ChangeType string `json:"changeType,omitempty"`

	// The user who made the change.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the change occurred.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// Whether the change has completed propagation to the NetStorage network. Propagation can take upwards of 60 minutes.
	Propagated bool `json:"propagated,omitempty"`
}

// UploadAccountCpcodesItems The upload directory assigned to this account. The CP code for the upload directory is set as the `cpcodeId` via the `cpcodes` array for the account.
type UploadAccountCpcodesItems struct {

	// The CP code serving as an upload directory.
	CpcodeId int `json:"cpcodeId,omitempty"`

	// The user who last modified this upload directory.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when this upload directory was last modified.
	LastModifiedDate         string   `json:"lastModifiedDate,omitempty"`
	SubDirectoryRestrictions []string `json:"subDirectoryRestrictions,omitempty"`
}

// ExistingNetStorageTechnicalContact The NetStorage Technical Contact serves as the default contact for this upload account. Configure these contacts in the Netstorage section of the [Identity and Access Management](https://control.akamai.com/wh/CUSTOMER/AKAMAI/en-US/WEBHELP/netstorage/netstorage-configuration-guide-for-objectstore-ns4/GUID-6B3B667F-EA4A-4F9E-AA6A-7585E4E3E6E3.html) tool in Control Center.
type ExistingNetStorageTechnicalContact struct {
}

// ExistingTechnicalContact A pair of existing Control Center user accounts that have been selected as Technical Contacts for the account. Use Control Center to set up contact information for these accounts.
type ExistingTechnicalContact struct {

	// The Control Center user account selected as the primary point of contact for the account.
	PrimarySfPin string `json:"primarySfPin,omitempty"`

	// The Control Center user account selected as the secondary point of contact for the account.
	SecondarySfPin string `json:"secondarySfPin,omitempty"`
}

// FtpItems Settings applied for the FTP access method.
type FtpItems struct {

	// Any optional notes made for the FTP password.
	Comments string `json:"comments,omitempty"`

	// A unique identifier generated for FTP authentication.
	Id string `json:"id,omitempty"`

	// Whether the FTP password is active for the account. When added to an account, an FTP password is active by default.
	IsActive bool `json:"isActive,omitempty"`

	// The user who last modified the FTP password.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the FTP password was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`
}

// FtpSecretsItems This is revealed if the shared secret for Two-factor authentication is to be generated manually.
type FtpSecretsItems struct {

	// Manually defined comment text included for the key. This content is used in the generation of the shared secret, but is optional. If left out, placeholder content is automatically generated.
	Comment string `json:"comment,omitempty"`

	// The manual entry set to serve as the shared secret. The key is exactly 16 characters in length and uses BASE-32 alphanumeric characters. This includes uppercase letters (A-Z), and numbers within the 2 - 7 range.
	Key string `json:"key,omitempty"`

	// How the shared secret was rotated. `CLIENT` indicates it was defined manually. For example, the `key` member was used and a shared secret was manually input. `SERVER` indicates it was automatically generated. For example, the `"generateSecret": "true"` pair was used.
	SecretGeneratedBy string `json:"secretGeneratedBy,omitempty"`

	// The user account that was used to generate the shared secret.
	SecretProvisionedBy string `json:"secretProvisionedBy,omitempty"`
}

// G2oItems Information pertaining to the G2O Key applied to the account for use with the NetStorage Usage API.
type G2oItems struct {

	// A unique identifier for the G2O Key.
	Id string `json:"id,omitempty"`

	// Whether the NetStorage Usage API has been enabled for use with this account.
	IsActive bool `json:"isActive,omitempty"`

	// The G2O Key. Referred to as the capitalized `Key` when used in the NetStorage Usage API.
	Key string `json:"key,omitempty"`

	// The user who last modified the G2O Key settings.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the G2O Key settings were last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// The name of the upload account. This is referred to as the "Id" in the Control Center interface.  It serves as the `Key-name` when used in the NetStorage Usage API.
	User string `json:"user,omitempty"`
}

// Keys The various keys and passwords configured for the access methods set in this account.
type Keys struct {
	Aspera []*AsperaItems `json:"aspera,omitempty"`
	Ftp    []*FtpItems    `json:"ftp,omitempty"`
	G2o    []*G2oItems    `json:"g2o,omitempty"`
	Rsync  []*RsyncItems  `json:"rsync,omitempty"`
	Ssh    []*SshItems    `json:"ssh,omitempty"`
}

// MultiFactorAuthConfig Two-factor authentication settings for the account.
type MultiFactorAuthConfig struct {

	// The current enabled or disabled status of Two-factor authentication for the account. `NONE` indicates it's disabled. `STRICT` Two-factor authentication is enabled. `OPTIONAL` indicates the account owner can access via FTP by providing only the FTP username and password, or providing the FTP username and password with the applicable time-based one time password (TOTP) appended to it.
	FtpMode    string             `json:"ftpMode,omitempty"`
	FtpSecrets []*FtpSecretsItems `json:"ftpSecrets,omitempty"`

	// Whether Akamai automatically generates the shared secret to be used with Two-factor authentication for this account.
	GenerateSecret bool `json:"generateSecret,omitempty"`
}

// NewTechnicalContact All details for the contact have been manually applied.
type NewTechnicalContact struct {

	// The email address for the contact.
	Email string `json:"email,omitempty"`

	// The first name of the contact.
	FirstName string `json:"firstName,omitempty"`

	// The last name (surname) of the contact.
	LastName string `json:"lastName,omitempty"`

	// Phone number details for the contact.
	Phone *Phone `json:"phone,omitempty"`
}

// Phone Phone number details for the contact.
type Phone struct {

	// The applicable area code for the contact phone number.
	AreaCode string `json:"areaCode,omitempty"`

	// The applicable country code for the contact phone number.
	CountryCode string `json:"countryCode,omitempty"`

	// The contact phone number.
	Number string `json:"number,omitempty"`
}

// RsyncItems Settings applied for the non-secure Rsync access method.
type RsyncItems struct {

	// Any optional notes made for Rsync password.
	Comments string `json:"comments,omitempty"`

	// A unique identifier generated for Rsync password authentication.
	Id string `json:"id,omitempty"`

	// Whether the non-secure Rsync password is active for the account. When added to an account, this password is active by default.
	IsActive bool `json:"isActive,omitempty"`

	// The user who last modified the Rsync password.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the Rsync password was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`
}

// SshItems Settings applied for the SSH access method.
type SshItems struct {

	// Any optional notes made for the SSH key.
	Comments string `json:"comments,omitempty"`

	// The NetStorage technical contact email address set up for this upload account.
	EmailId string `json:"emailId,omitempty"`

	// A unique identifier generated for SSH authentication.
	Id string `json:"id,omitempty"`

	// Whether the SSH key is active for the account. When added to an account, an SSH key is active by default.
	IsActive bool `json:"isActive,omitempty"`

	// The SSH key applied to the account, if applicable.  SSH-2 RSA and SSH-2 DSA formats are supported.
	Key string `json:"key,omitempty"`

	// The user who last modified the SSH key.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the SSH key was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`
}

// TechnicalContactInfo Technical Contact information set up for the account.
type TechnicalContactInfo struct {

	// The NetStorage Technical Contact serves as the default contact for this upload account. Configure these contacts in the Netstorage section of the [Identity and Access Management](https://control.akamai.com/wh/CUSTOMER/AKAMAI/en-US/WEBHELP/netstorage/netstorage-configuration-guide-for-objectstore-ns4/GUID-6B3B667F-EA4A-4F9E-AA6A-7585E4E3E6E3.html) tool in Control Center.
	ExistingNetStorageTechnicalContact *ExistingNetStorageTechnicalContact `json:"existingNetStorageTechnicalContact,omitempty"`

	// A pair of existing Control Center user accounts that have been selected as Technical Contacts for the account. Use Control Center to set up contact information for these accounts.
	ExistingTechnicalContact *ExistingTechnicalContact `json:"existingTechnicalContact,omitempty"`

	// All details for the contact have been manually applied.
	NewTechnicalContact *NewTechnicalContact `json:"newTechnicalContact,omitempty"`
}

// UploadAccount Accesses a specific storage group. You can list, create and get details of an account.
type UploadAccount struct {

	// Specifies the settings for the upload directory that has been selected for this account.
	AccessConfig *AccessConfig `json:"accessConfig,omitempty"`

	// Whether Aspera Upload Acceleration was enabled as an access method during creation of the account. Aspera Upload Acceleration makes use of a third party client application from AsperaSoft that offers expedited uploads to a storage group.
	AsperaEnabled bool `json:"asperaEnabled,omitempty"`

	// Configures how to prevent brute force attacks over FTP. This protects the target storage group from excessive incorrect FTP login attempts.
	BruteForceAttackConfig *BruteForceAttackConfig `json:"bruteForceAttackConfig,omitempty"`
	ChangeHistory          []*ChangeHistoryItems   `json:"changeHistory,omitempty"`

	// The primary contact email address set up for the account.
	Email string `json:"email,omitempty"`

	// Whether FTP was enabled as an access method when the account was created. This allows the account to access the storage group using FTP and a unique password you've set up for use with FTP.
	FtpEnabled bool `json:"ftpEnabled,omitempty"`

	// Indicates the upload account is globally mapped.
	GlobalUploadAccount bool `json:"globalUploadAccount,omitempty"`

	// Whether access to FileManager was enabled during creation of the account. FileManager is a NetStorage interface that allows you to perform basic file management operations from Control Center. If enabled, this account can be used to access the storage group via FileManager.
	HasFileManagerAccess bool `json:"hasFileManagerAccess,omitempty"`

	// Whether access to the [NetStorage Usage API](https://learn.akamai.com/en-us/webhelp/netstorage/netstorage-http-api-developer-guide/) was enabled during creation of the account. This API is used to interact with your content, including operations such as upload, download, move and delete.  If enabled, this account can be used to access the storage group via this API.
	HasHttpApiAccess bool `json:"hasHttpApiAccess,omitempty"`

	// Whether the account is currently being propagated. Any changes made to an account will propagate to the NetStorage network.  This can take upwards of 60 minutes.
	HasPendingPropagation bool `json:"hasPendingPropagation,omitempty"`

	// Whether this account is enabled for editing. Editing accounts is currently only supported in Control Center.
	IsEditable bool `json:"isEditable,omitempty"`
	IsVisible  bool `json:"isVisible,omitempty"`

	// The various keys and passwords configured for the access methods set in this account.
	Keys *Keys `json:"keys,omitempty"`

	// The user who last modified the account.
	LastModifiedBy string `json:"lastModifiedBy,omitempty"`

	// The ISO 8601 timestamp labeling when the account was last modified.
	LastModifiedDate string `json:"lastModifiedDate,omitempty"`

	// Two-factor authentication settings for the account.
	MultiFactorAuthConfig *MultiFactorAuthConfig `json:"multiFactorAuthConfig,omitempty"`

	// Whether quick-delete functionality is enabled in the storage group that this account has been configured to access.
	QuickDelete bool `json:"quickDelete,omitempty"`

	// Whether non-secure Rsync was enabled as an access method during creation of the account. This allows the account to access the storage group using the Rsync protocol and a unique password you've set up for use with Rsync.
	RsyncEnabled bool `json:"rsyncEnabled,omitempty"`

	// The unique ID assigned to the Access Control List (ACL) Rule Set for the account, if applicable. These rule sets are comprised of a list of IP Addresses or Geographic Regions that are allowed or blocked from access. The appropriate ID integer is set as the `type` for the `ruleSetId` object for the account.
	RuleSetId int `json:"ruleSetId,omitempty"`

	// Whether Secure Shell (SSH) is enabled as an access method for the account, through application of an SSH key during creation of the account. This allows access to the storage group via this account using SFTP, SecureCopy, Secure Rsync, Aspera Upload Acceleration and the NetStorage CMShell.
	SshEnabled bool `json:"sshEnabled,omitempty"`

	// The activation status and availability of the account. `INACTIVE` indicates the account has been deactivated. `NEW` indicates the account is being propagated. `ACTIVATIONSENT` indicates the initial activation email has been sent to the contact on the account, and NetStorage is awaiting a confirmation it was received. `ACTIVE` indicates the account is fully propagated and available for use.
	Status string `json:"status,omitempty"`

	// The unique identifier for the storage group that this account has been configured to access.
	StorageGroupId int `json:"storageGroupId,omitempty"`

	// The upload account has been configured to access this specific storage group.
	StorageGroupName string `json:"storageGroupName,omitempty"`

	// The format or migration status of the storage group that this account has been configured to access. `FILESTORE` indicates an NS3 format group. `OBJECTSTORE` indicates an NS4 format group. `MIGRATING` indicates the group is being migrated from NS3 to NS4.
	StorageGroupType string `json:"storageGroupType,omitempty"`

	// Technical Contact information set up for the account.
	TechnicalContactInfo *TechnicalContactInfo `json:"technicalContactInfo,omitempty"`

	// The name you've set for the account. This is referred to as the ID in Control Center.
	UploadAccountId string `json:"uploadAccountId,omitempty"`
}
